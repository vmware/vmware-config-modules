{
 "openapi": "3.1.0",
 "info": {
  "title": "Config-modules APIs",
  "summary": "List of APIs exposed by Config-modules",
  "version": "1.0.0"
 },
 "paths": {
  "/config-modules/about": {
   "get": {
    "tags": [
     "misc"
    ],
    "summary": "About",
    "description": "API to retrieve package information.",
    "operationId": "about_config_modules_about_get",
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/About"
        }
       }
      }
     }
    }
   }
  },
  "/config-modules/health": {
   "get": {
    "tags": [
     "misc"
    ],
    "summary": "Health",
    "description": "API to retrieve health status.",
    "operationId": "health_config_modules_health_get",
    "responses": {
     "200": {
      "description": "Successful Response",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HealthCheck"
        }
       }
      }
     }
    }
   }
  },
  "/config-modules/api/vcenter/configuration/v1/get": {
   "post": {
    "tags": [
     "vcenter"
    ],
    "summary": "Get Configuration",
    "description": "Endpoint to get vcenter configuration.",
    "operationId": "get_configuration_config_modules_api_vcenter_configuration_v1_get_post",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/GetConfigurationRequest"
       },
       "examples": {
        "default": {
         "summary": "Without template",
         "description": "This is to retrieve all vcenter configuration without any filtering.",
         "value": {
          "target": {
           "hostname": "vcenter-1.vsphere.local",
           "auth": [
            {
             "username": "sso_username",
             "password": "sso_password",
             "type": "SSO",
             "ssl_thumbprint": "AA:BB:CC:DD..."
            }
           ]
          }
         }
        },
        "template": {
         "summary": "With template",
         "description": "This is to retrieve only vcenter configuration based on the template.",
         "value": {
          "target": {
           "hostname": "vcenter-1.vsphere.local",
           "auth": [
            {
             "username": "sso_username",
             "password": "sso_password",
             "type": "SSO",
             "ssl_thumbprint": "AA:BB:CC:DD..."
            }
           ]
          },
          "template": {
           "authmgmt": {
            "global_permissions": []
           },
           "appliance": {
            "access_settings": {
             "shell": {
              "enabled": ""
             }
            }
           }
          }
         }
        },
        "invalid": {
         "summary": "Missing required parameters",
         "description": "Same request body with missing hostname.",
         "value": {
          "target": {
           "auth": [
            {
             "username": "sso_username",
             "password": "sso_password",
             "type": "SSO",
             "ssl_thumbprint": "AA:BB:CC:DD..."
            }
           ]
          }
         }
        }
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "The filtered configuration spec.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/GetConfigResponsePayload"
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  },
  "/config-modules/api/vcenter/configuration/v1/scan-drifts": {
   "post": {
    "tags": [
     "vcenter"
    ],
    "summary": "Scan Drifts",
    "description": "Endpoint to get drifts against an input spec.",
    "operationId": "scan_drifts_config_modules_api_vcenter_configuration_v1_scan_drifts_post",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/ScanDriftsRequest"
       },
       "examples": {
        "default": {
         "summary": "default",
         "description": "Sample request body",
         "value": {
          "target": {
           "hostname": "vcenter-1.vsphere.local",
           "auth": [
            {
             "username": "sso_username",
             "password": "sso_password",
             "type": "SSO",
             "ssl_thumbprint": "AA:BB:CC:DD..."
            }
           ]
          },
          "input_spec": {
           "appliance": {
            "user_account_settings": {
             "local_accounts_policy": {
              "warn_days": 7,
              "max_days": 120,
              "min_days": 1
             }
            },
            "syslog": [
             {
              "hostname": "8.8.4.0",
              "protocol": "TLS",
              "port": 90
             }
            ],
            "network": {
             "dns_server_configuration": {
              "mode": "IS_STATIC",
              "servers": [
               "10.0.0.250",
               "8.8.8.8"
              ],
              "domains": [
               "."
              ]
             }
            }
           }
          }
         }
        }
       }
      }
     },
     "required": true
    },
    "responses": {
     "200": {
      "description": "Successful drift workflow response.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DriftResponsePayload"
        },
        "example": {
         "schema_version": "1.0-DRAFT",
         "id": "2bcaa939-e6c2-4347-808f-ad90debc20ae",
         "name": "config_modules_vmware.controllers.vcenter.vc_profile",
         "timestamp": "2024-03-28T23:03:19.472Z",
         "description": "Compliance check completed successfully",
         "status": "NON_COMPLIANT",
         "result": {
          "additions": [
           {
            "key": "appliance/network/dns_server_configuration/servers/1",
            "category": "network",
            "value": "8.8.8.8"
           }
          ],
          "modifications": [
           {
            "key": "appliance/user_account_settings/local_accounts_policy/max_days",
            "category": "user_account_settings",
            "current_value": 90,
            "desired_value": 120
           }
          ],
          "deletions": [
           {
            "key": "appliance/syslog/1",
            "category": "syslog",
            "value": {
             "hostname": "8.8.1.1",
             "protocol": "TLS",
             "port": 90
            }
           }
          ]
         },
         "target": {
          "type": "vcenter",
          "hostname": "10.0.0.6"
         }
        }
       }
      }
     },
     "500": {
      "description": "Internal error response.",
      "content": {
       "application/json": {
        "example": {
         "schema_version": "1.0-DRAFT",
         "id": "2bcaa939-e6c2-4347-808f-ad90debc20ae",
         "name": "config_modules_vmware.controllers.vcenter.vc_profile",
         "timestamp": "2024-03-28T23:03:19.472Z",
         "description": "Compliance check failed",
         "status": "FAILED",
         "errors": [
          {
           "timestamp": "2024-03-07T12:50:39.092Z",
           "source": {
            "server": "vcenter1.mydomain.com",
            "type": "vcenter",
            "endpoint": "https://vcenter1.mydomain.com/apis/vsphere-automation/latest/appliance/api/appliance/vcenter/settings/v1/configactionscan-desired-statevmw-tasktrue/post/"
           },
           "error": {
            "id": "",
            "localizable_message": "",
            "message": "Server Internal Error"
           },
           "remediation": {
            "id": "",
            "localizable_message": "",
            "message": "Please fix the input spec appliance system entry [0] and retry"
           }
          }
         ],
         "target": {
          "type": "vcenter",
          "hostname": "10.0.0.6"
         }
        }
       }
      }
     },
     "422": {
      "description": "Validation Error",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HTTPValidationError"
        }
       }
      }
     }
    }
   }
  }
 },
 "components": {
  "schemas": {
   "About": {
    "properties": {
     "name": {
      "type": "string",
      "title": "Name",
      "default": "config_modules_vmware"
     },
     "description": {
      "type": "string",
      "title": "Description",
      "default": "VMware Unified Config Modules"
     },
     "version": {
      "type": "string",
      "title": "Version",
      "default": "0.0.8"
     },
     "author": {
      "type": "string",
      "title": "Author",
      "default": "VMware, Inc."
     }
    },
    "type": "object",
    "title": "About",
    "description": "Class to represent the package information."
   },
   "Auth": {
    "properties": {
     "username": {
      "type": "string",
      "title": "Username",
      "description": "Username."
     },
     "password": {
      "type": "string",
      "title": "Password",
      "description": "Password."
     },
     "ssl_thumbprint": {
      "type": "string",
      "title": "Ssl Thumbprint",
      "description": "Optional SSL thumbprint, in case certs are not available."
     },
     "type": {
      "allOf": [
       {
        "$ref": "#/components/schemas/AuthType"
       }
      ],
      "description": "Type of authentication."
     }
    },
    "type": "object",
    "title": "Auth",
    "description": "Class to represent authentication parameters."
   },
   "AuthType": {
    "type": "string",
    "enum": [
     "SSO",
     "BASIC",
     "SSH"
    ],
    "title": "AuthType",
    "description": "Enum Class to define various authentication types."
   },
   "ConfigAddition": {
    "properties": {
     "key": {
      "type": "string",
      "title": "Key",
      "description": "The configuration property."
     },
     "category": {
      "type": "string",
      "title": "Category",
      "description": "The component."
     },
     "value": {
      "title": "Value",
      "description": "The configuration to be added to the product."
     }
    },
    "type": "object",
    "required": [
     "key",
     "value"
    ],
    "title": "ConfigAddition",
    "description": "Class to represent the added configuration"
   },
   "ConfigDeletion": {
    "properties": {
     "key": {
      "type": "string",
      "title": "Key",
      "description": "The configuration property."
     },
     "category": {
      "type": "string",
      "title": "Category",
      "description": "The component."
     },
     "value": {
      "title": "Value",
      "description": "The configuration to be removed from the product."
     }
    },
    "type": "object",
    "required": [
     "key",
     "value"
    ],
    "title": "ConfigDeletion",
    "description": "Class to represent the configuration to be removed from the product"
   },
   "ConfigModification": {
    "properties": {
     "key": {
      "type": "string",
      "title": "Key",
      "description": "The configuration property."
     },
     "category": {
      "type": "string",
      "title": "Category",
      "description": "The component."
     },
     "current_value": {
      "title": "Current Value",
      "description": "The current value from the product."
     },
     "desired_value": {
      "title": "Desired Value",
      "description": "The desired value from the spec."
     }
    },
    "type": "object",
    "required": [
     "key",
     "current_value",
     "desired_value"
    ],
    "title": "ConfigModification",
    "description": "Class to represent the configuration that needs to be modified"
   },
   "DriftResponsePayload": {
    "properties": {
     "schema_version": {
      "type": "string",
      "title": "Schema Version",
      "description": "The drift response spec.",
      "default": "1.0-DRAFT"
     },
     "id": {
      "type": "string",
      "title": "Id",
      "description": "The uuid of the drift."
     },
     "name": {
      "type": "string",
      "title": "Name",
      "description": "The name of the function.",
      "default": "Scan Drifts"
     },
     "timestamp": {
      "type": "string",
      "title": "Timestamp",
      "description": "The timestamp of drift calculation in ISO format (YYYY-MM-DDTHH:MM:SS.mmm)"
     },
     "description": {
      "type": "string",
      "title": "Description",
      "description": "The description of the function."
     },
     "status": {
      "allOf": [
       {
        "$ref": "#/components/schemas/Status"
       }
      ],
      "description": "The status of the function."
     },
     "result": {
      "allOf": [
       {
        "$ref": "#/components/schemas/Result"
       }
      ],
      "description": "The drifts."
     },
     "errors": {
      "items": {
       "$ref": "#/components/schemas/Error"
      },
      "type": "array",
      "title": "Errors",
      "description": "Errors during drift detection."
     },
     "target": {
      "allOf": [
       {
        "$ref": "#/components/schemas/Target"
       }
      ],
      "description": "The targeted product."
     }
    },
    "type": "object",
    "required": [
     "timestamp",
     "status",
     "target"
    ],
    "title": "DriftResponsePayload",
    "description": "Class to represent the response format of a scan drift API call."
   },
   "Error": {
    "properties": {
     "timestamp": {
      "type": "string",
      "title": "Timestamp",
      "description": "Timestamp of error occurrence in ISO format (YYYY-MM-DDTHH:MM:SS.mmm)"
     },
     "source": {
      "allOf": [
       {
        "$ref": "#/components/schemas/ErrorSource"
       }
      ],
      "description": "The source of the error."
     },
     "error": {
      "allOf": [
       {
        "$ref": "#/components/schemas/Message"
       }
      ],
      "description": "The error message."
     },
     "remediation": {
      "allOf": [
       {
        "$ref": "#/components/schemas/Message"
       }
      ],
      "description": "The remediation for the error."
     }
    },
    "type": "object",
    "required": [
     "timestamp",
     "source",
     "error"
    ],
    "title": "Error",
    "description": "Class to represent the errors caught during the workflow."
   },
   "ErrorSource": {
    "properties": {
     "server": {
      "type": "string",
      "title": "Server",
      "description": "The server hostname.",
      "default": "0.0.0.0"
     },
     "type": {
      "type": "string",
      "title": "Type",
      "description": "The type of server.",
      "default": "ConfigModules"
     },
     "endpoint": {
      "type": "string",
      "title": "Endpoint",
      "description": "The endpoint for which error occurred."
     }
    },
    "type": "object",
    "title": "ErrorSource",
    "description": "Class to represent the error source."
   },
   "GetConfigResponsePayload": {
    "properties": {
     "schema_version": {
      "type": "string",
      "title": "Schema Version",
      "description": "The get configuration spec.",
      "default": "1.0-DRAFT"
     },
     "name": {
      "type": "string",
      "title": "Name",
      "description": "The name of the function.",
      "default": "Get Configuration"
     },
     "timestamp": {
      "type": "string",
      "title": "Timestamp",
      "description": "The timestamp of drift calculation in ISO format (YYYY-MM-DDTHH:MM:SS.mmm)"
     },
     "description": {
      "type": "string",
      "title": "Description",
      "description": "The description of the function."
     },
     "status": {
      "allOf": [
       {
        "$ref": "#/components/schemas/GetConfigStatus"
       }
      ],
      "description": "The status of the get configuration function."
     },
     "result": {
      "type": "object",
      "title": "Result",
      "description": "The current configuration as retrieved from the target product."
     },
     "errors": {
      "items": {
       "$ref": "#/components/schemas/Error"
      },
      "type": "array",
      "title": "Errors",
      "description": "Errors while retrieving current configuration."
     },
     "target": {
      "allOf": [
       {
        "$ref": "#/components/schemas/Target"
       }
      ],
      "description": "The targeted product."
     }
    },
    "type": "object",
    "required": [
     "timestamp",
     "status",
     "target"
    ],
    "title": "GetConfigResponsePayload",
    "description": "Class to represent the response format of a scan drift API call."
   },
   "GetConfigStatus": {
    "type": "string",
    "enum": [
     "SUCCESS",
     "PARTIAL",
     "FAILED"
    ],
    "title": "GetConfigStatus",
    "description": "Enum Class to define status of retrieving the configuration."
   },
   "GetConfigurationRequest": {
    "properties": {
     "target": {
      "allOf": [
       {
        "$ref": "#/components/schemas/RequestTarget"
       }
      ],
      "description": "The product target information."
     },
     "template": {
      "type": "object",
      "title": "Template",
      "description": "Filter spec to filter, based on the product schema."
     }
    },
    "type": "object",
    "required": [
     "target"
    ],
    "title": "GetConfigurationRequest",
    "description": "Class to represent the request format of a get configuration API call."
   },
   "HTTPValidationError": {
    "properties": {
     "detail": {
      "items": {
       "$ref": "#/components/schemas/ValidationError"
      },
      "type": "array",
      "title": "Detail"
     }
    },
    "type": "object",
    "title": "HTTPValidationError"
   },
   "HealthCheck": {
    "properties": {
     "status": {
      "type": "string",
      "title": "Status",
      "default": "OK"
     }
    },
    "type": "object",
    "title": "HealthCheck",
    "description": "Class to validate and return when performing a health check."
   },
   "Message": {
    "properties": {
     "id": {
      "type": "string",
      "title": "Id",
      "description": "The fully qualified identifier. Useful to identify the localizable_message."
     },
     "localizable_message": {
      "type": "string",
      "title": "Localizable Message",
      "description": "The localizable message."
     },
     "message": {
      "type": "string",
      "title": "Message",
      "description": "The message."
     }
    },
    "type": "object",
    "required": [
     "message"
    ],
    "title": "Message",
    "description": "Class to represent the message object."
   },
   "ProductEnum": {
    "type": "string",
    "enum": [
     "esxi",
     "vcenter",
     "sddc_manager",
     "nsxt_manager",
     "nsxt_edge",
     "vrslcm",
     "vidm",
     "vro",
     "vra",
     "vrli"
    ],
    "title": "ProductEnum",
    "description": "Enum class for product."
   },
   "RequestTarget": {
    "properties": {
     "hostname": {
      "type": "string",
      "title": "Hostname",
      "description": "The hostname of the product."
     },
     "type": {
      "allOf": [
       {
        "$ref": "#/components/schemas/ProductEnum"
       }
      ],
      "description": "The product type."
     },
     "auth": {
      "items": {
       "$ref": "#/components/schemas/Auth"
      },
      "type": "array",
      "title": "Auth",
      "description": "The authentication to use."
     }
    },
    "type": "object",
    "required": [
     "hostname"
    ],
    "title": "RequestTarget",
    "description": "Class to represent the request target."
   },
   "Result": {
    "properties": {
     "additions": {
      "items": {
       "$ref": "#/components/schemas/ConfigAddition"
      },
      "type": "array",
      "title": "Additions",
      "description": "The configurations that needs to be added to the product."
     },
     "modifications": {
      "items": {
       "$ref": "#/components/schemas/ConfigModification"
      },
      "type": "array",
      "title": "Modifications",
      "description": "The configurations that needs to be modified on the product."
     },
     "deletions": {
      "items": {
       "$ref": "#/components/schemas/ConfigDeletion"
      },
      "type": "array",
      "title": "Deletions",
      "description": "The configurations that needs to be deleted from the product"
     }
    },
    "type": "object",
    "title": "Result",
    "description": "Class to represent the results of the scan drift API call."
   },
   "ScanDriftsRequest": {
    "properties": {
     "target": {
      "allOf": [
       {
        "$ref": "#/components/schemas/RequestTarget"
       }
      ],
      "description": "The product target information."
     },
     "input_spec": {
      "type": "object",
      "title": "Input Spec",
      "description": "Desired state input spec, based on the product schema."
     }
    },
    "type": "object",
    "required": [
     "target",
     "input_spec"
    ],
    "title": "ScanDriftsRequest",
    "description": "Class to represent the request format of a scan drifts API call."
   },
   "Status": {
    "type": "string",
    "enum": [
     "COMPLIANT",
     "NON_COMPLIANT",
     "FAILED"
    ],
    "title": "Status",
    "description": "Drift status enum"
   },
   "Target": {
    "properties": {
     "hostname": {
      "type": "string",
      "title": "Hostname",
      "description": "The hostname of the product."
     },
     "type": {
      "allOf": [
       {
        "$ref": "#/components/schemas/ProductEnum"
       }
      ],
      "description": "The product type."
     }
    },
    "type": "object",
    "required": [
     "hostname"
    ],
    "title": "Target",
    "description": "Class to represent a target."
   },
   "ValidationError": {
    "properties": {
     "loc": {
      "items": {
       "anyOf": [
        {
         "type": "string"
        },
        {
         "type": "integer"
        }
       ]
      },
      "type": "array",
      "title": "Location"
     },
     "msg": {
      "type": "string",
      "title": "Message"
     },
     "type": {
      "type": "string",
      "title": "Error Type"
     }
    },
    "type": "object",
    "required": [
     "loc",
     "msg",
     "type"
    ],
    "title": "ValidationError"
   }
  }
 }
}